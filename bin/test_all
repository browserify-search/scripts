#! /usr/bin/env node

var db = require('../lib/db')
var testModule = require('../lib/test_module')
var iterate = require('../lib/mongo/iterate_cursor')
var upsert = require('../lib/mongo/upsert')
var findOne = require('../lib/mongo/find_only_one')
var log = require('npmlog')
var cmdLn = require('cmd-ln')
var assert = require('assert')
var is = require('is-type')

cmdLn(function(_number, _concurrency){
  var dir = '/tmp/browserify-search'

  db(function(err, db){
    if (err) return log.error(err.message)

    var modules = db.collection('modules')

    var version = 4

    var criteria = {
      $or: [
        {'testResults.version': {$lt: version}}, 
        {'testResults.version': null}
      ]
    }

    var cursor = modules
      .find(
        criteria,
        {name: true})

    if (_number){
      var num = Number(_number)
      assert(is.number(num))
      assert(Math.floor(num) === num)
      cursor = cursor.limit(num)
    }

    var concurrency = 10
    if (_concurrency){
      concurrency = Number(_concurrency)
    }

    var startTime
    var modulesProcessed = 0
    var concurrentModules = 0

    iterate(cursor, concurrency,
      function(module, next){
        if (!startTime) startTime = +new Date
        concurrentModules++
        log.info(module.name + ':', 'started, concurrency:', 
          concurrentModules)
        testModule(module.name, dir, function(err, results){
          if (err){
            // this shouldn't happen
            log.error(module.name + ':', err.message)
            return next(err)
          }
          displayResults(module, results)
          findOne(modules, {name: module.name}, function(err, mdoc){
            if (err){
              log.error(module.name + ':', err.message)
              return next(err)
            }
            mdoc.testResults = results;
            mdoc.testResults.version = version
            mdoc.browserify = results.install.passed && 
              results.browserify.passed;
            upsert(modules, 'name', mdoc, function(err){
              if (err) return next(err)
              modulesProcessed++
              concurrentModules--
              next()
            })
          })
        })
      }, function(err){
        var endTime = +new Date
        if (err) console.error(err.message)
        log.info('ok')
        var duration = endTime - startTime
        log.info('Total time:', duration + 'ms')
        log.info('Time per module:', (duration / modulesProcessed) + 'ms')
        db.close()
      })
  })

})

function displayResults(module, results){
  log.info(module.name + ':', results)
}